<!-- Products Management Section -->
<section id="products">
  <h2 class="mb-4 text-2xl font-bold">Products Management</h2>
  <button
    onclick="showModal('addProductModal')"
    class="mb-4 rounded bg-green-500 py-2 px-4 font-bold text-white hover:bg-green-700"
  >
    Add New Product
  </button>
  <table class="min-w-full bg-white">
    <thead>
      <tr>
        <th class="border-b py-2 px-4">ID</th>
        <th class="border-b py-2 px-4">Name</th>
        <th class="border-b py-2 px-4">Price</th>
        <th class="border-b py-2 px-4">Actions</th>
      </tr>
    </thead>
    <tbody id="productTableBody">
      <!-- Product rows will be dynamically added here -->
    </tbody>
  </table>
</section>
<!-- Add Product Modal -->
<div
  id="addProductModal"
  class="fixed inset-0 hidden h-full w-full overflow-y-auto bg-gray-600 bg-opacity-50"
>
  <div
    class="relative top-20 mx-auto w-96 rounded-md border bg-white p-5 shadow-lg"
  >
    <h3 class="mb-4 text-lg font-bold">Add New Product</h3>
    <form id="addProductForm">
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="name">
          Name
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="name"
          type="text"
          placeholder="Name"
          required
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="brand">
          Brand
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="brand"
          type="text"
          placeholder="Brand"
          required
        />
      </div>
      <div class="mb-4">
        <label
          class="mb-2 block text-sm font-bold text-gray-700"
          for="category"
        >
          Category
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="category"
          type="text"
          placeholder="Category"
          required
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="storage">
          Storage
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="storage"
          type="text"
          placeholder="Storage"
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="cpu">
          CPU
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="cpu"
          type="text"
          placeholder="CPU"
        />
      </div>
      <div class="mb-4">
        <label
          class="mb-2 block text-sm font-bold text-gray-700"
          for="screenSize"
        >
          Screen Size
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="screenSize"
          type="text"
          placeholder="Screen Size"
        />
      </div>
      <div class="mb-4">
        <label
          class="mb-2 block text-sm font-bold text-gray-700"
          for="resolution"
        >
          Resolution
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="resolution"
          type="text"
          placeholder="Resolution"
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="ram">
          Ram
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="ram"
          type="text"
          placeholder="Ram"
        />
      </div>
      <div class="mb-4">
        <label
          class="mb-2 block text-sm font-bold text-gray-700"
          for="graphicCard"
        >
          Graphic Card
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="graphicCard"
          type="text"
          placeholder="Graphic Card"
        />
      </div>
      <div class="mb-4">
        <label
          class="mb-2 block text-sm font-bold text-gray-700"
          for="description"
        >
          Description
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="description"
          type="text"
          placeholder="Description"
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="images">
          Images
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="images"
          type="file"
          multiple
          accept="image/*"
        />
        <div id="imagesPreview" class="flex flex-wrap mt-2">
          <!-- Preview images will be appended here -->
        </div>
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="price">
          Price
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="price"
          type="number"
          min="0"
          placeholder="Price"
          required
        />
      </div>
      <div class="mb-4">
        <label
          class="mb-2 block text-sm font-bold text-gray-700"
          for="priceSale"
        >
          Price Sale
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="priceSale"
          type="number"
          min="0"
          placeholder="Price Sale"
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="inStock">
          In Stock
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="inStock"
          type="number"
          min="0"
          placeholder="In Stock"
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="status">
          Status
        </label>
        <select
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="status"
        >
          <option value="on stock">On Stock</option>
          <option value="out of stock">Out of Stock</option>
          <option value="suspend">Suspend</option>
        </select>
      </div>
      <div class="flex items-center justify-between">
        <button
          class="focus:shadow-outline rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700 focus:outline-none"
          type="submit"
        >
          Add Product
        </button>
        <button
          class="focus:shadow-outline rounded bg-gray-500 py-2 px-4 font-bold text-white hover:bg-gray-700 focus:outline-none"
          type="button"
          onclick="hideModal('addProductModal')"
        >
          Cancel
        </button>
      </div>
    </form>
  </div>
</div>
<script>
  // Use this for AJAX rendering
  function renderProducts() {
    const tableBody = document.getElementById('productTableBody');
    tableBody.innerHTML = '';
    products.forEach((product) => {
      const row = `
                    <tr>
                        <td class="py-2 px-4 border-b">${product.id}</td>
                        <td class="py-2 px-4 border-b">${product.name}</td>
                        <td class="py-2 px-4 border-b">$${product.price.toFixed(
                          2,
                        )}</td>
                        <td class="py-2 px-4 border-b">
                            <button onclick="editProduct(${
                              product.id
                            })" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded mr-2">Edit</button>
                            <button onclick="deleteProduct(${
                              product.id
                            })" class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded">Delete</button>
                        </td>
                    </tr>
                `;
      tableBody.innerHTML += row;
    });
  }

  let selectedImages = [];

  document
    .getElementById('images')
    .addEventListener('change', function (event) {
      [...event.target.files].forEach((file) => selectedImages.push(file));
      renderSelectedImages();
    });

  function renderSelectedImages() {
    const previewContainer = document.getElementById('imagesPreview');
    previewContainer.innerHTML = '';

    selectedImages.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const wrapper = document.createElement('div');
        wrapper.classList.add('relative', 'inline-block', 'm-1');

        const img = document.createElement('img');
        img.src = e.target.result;
        img.classList.add('h-20', 'w-20', 'object-cover');

        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.innerText = 'x';
        removeBtn.classList.add(
          'absolute',
          '-top-2',
          '-right-2',
          'bg-red-600',
          'text-white',
          'rounded-full',
          'w-4',
          'h-4',
          'flex',
          'items-center',
          'justify-center',
          'text-sm',
          'font-bold',
          'hover:bg-red-700',
          'focus:outline-none',
        );
        removeBtn.onclick = () => removeImage(index);

        wrapper.appendChild(img);
        wrapper.appendChild(removeBtn);
        previewContainer.appendChild(wrapper);
      };
      reader.readAsDataURL(file);
    });
  }

  function removeImage(index) {
    selectedImages.splice(index, 1);
    renderSelectedImages();
  }

  async function addProduct(event) {
    event.preventDefault();
    const formData = new FormData();
    selectedImages.forEach((file) => formData.append('images', file));
    formData.append('name', document.getElementById('name').value);
    formData.append('brand', document.getElementById('brand').value);
    formData.append('category', document.getElementById('category').value);
    formData.append('storage', document.getElementById('storage').value);
    formData.append('cpu', document.getElementById('cpu').value);
    formData.append('screenSize', document.getElementById('screenSize').value);
    formData.append('resolution', document.getElementById('resolution').value);
    formData.append('ram', document.getElementById('ram').value);
    formData.append(
      'graphicCard',
      document.getElementById('graphicCard').value,
    );
    formData.append(
      'description',
      document.getElementById('description').value,
    );
    formData.append('price', document.getElementById('price').value);
    formData.append('priceSale', document.getElementById('priceSale').value);
    formData.append('inStock', document.getElementById('inStock').value);
    formData.append('status', document.getElementById('status').value);

    await fetch('/api/product', {
      method: 'POST',
      body: formData,
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          // SweetAlert2
          Swal.fire({
            icon: 'success',
            title: 'Sản phẩm đã được thêm thành công',
            timer: 2000,
            timerProgressBar: true,
            showConfirmButton: false,
          });
        } else {
          // SweetAlert2
          Swal.fire({
            icon: 'error',
            title: 'Thêm sản phẩm thất bại',
            text: data.message,
            timer: 2000,
            timerProgressBar: true,
            showConfirmButton: false,
          });
        }
      });
    // renderProducts();
    hideModal('addProductModal');
    event.target.reset();
    selectedImages = [];
    renderSelectedImages();
  }

  function editProduct(id) {
    // Implement edit functionality
    console.log('Edit product', id);
  }

  function deleteProduct(id) {
    products = products.filter((product) => product.id !== id);
    renderProducts();
  }

  // Event listeners
  document
    .getElementById('addProductForm')
    .addEventListener('submit', addProduct);
</script>
