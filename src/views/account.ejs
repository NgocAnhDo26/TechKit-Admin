<!-- Account Management Section -->
<section id="account">
  <h2 class="mb-4 text-2xl font-bold">Account Management</h2>
  <!-- <button onclick="showModal('addAccountModal')"
    class="mb-4 rounded bg-green-500 py-2 px-4 font-bold text-white hover:bg-green-700">
    Add New Account
  </button> -->
  <!-- Filter Form, including search by name, filter by category, brand and sort by -->
  <form class="mb-4 text-sm">
    <div class="flex gap-4 items-center">
      <input id="account-search-name"
        class="focus:shadow-outline appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
        type="text" placeholder="Tìm kiếm theo tên" />
      <input id="account-search-email"
        class="focus:shadow-outline appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
        type="text" placeholder="Tìm kiếm theo email" />
      <button type="button" id="account-filter-button"
        class="rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700 focus:outline-none">
        Lọc
      </button>

      <p class="flex-1 text-end">Sắp xếp: </p>
      <select id="account-sort"
        class="focus:shadow-outline appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none">
        <option value="default">Mặc định</option>
        <option value="create_time-desc">Ngày tạo: Mới nhất</option>
        <option value="create_time-asc">Ngày tạo: Cũ nhất</option>
        <option value="name-asc">Tên: tăng dần</option>
        <option value="name-desc">Tên: giảm dần</option>
      </select>
    </div>
  </form>
  <table class="min-w-full bg-white">
    <thead>
      <tr>
        <th class="border-b py-2 px-4">ID</th>
        <th class="border-b py-2 px-4">Tên Người Dùng</th>
        <th class="border-b py-2 px-4">Email</th>
        <th class="border-b py-2 px-4">Vai Trò</th>
        <th class="border-b py-2 px-4">Ngày Tạo</th>
        <th class="border-b py-2 px-4">Hành Động</th>
      </tr>
    </thead>
    <tbody id="accountTableBody">
      <% if (accounts && accounts.accounts.length> 0) { %>
        <% accounts.accounts.forEach(account=> { %>
          <tr>
            <td class="py-2 px-4 border-b text-center">
              <%= account.id %>
            </td>
            <td class="py-2 px-4 border-b text-center">
              <%= account.name %>
            </td>
            <td class="py-2 px-4 border-b text-center">
              <%= account.email %>
            </td>
            <td class="py-2 px-4 border-b text-center">
              <%= account.is_admin ? 'Admin' : 'User' %>
            </td>
            <td class="py-2 px-4 border-b text-center">
              <%= new Date(account.create_time).toLocaleDateString('en-GB', { day: '2-digit' , month: '2-digit' ,
                year: 'numeric' , }) %>
                <%= new Date(account.create_time).toLocaleTimeString('en-US', { hour: '2-digit' , minute: '2-digit' ,
                  second: '2-digit' , }) %>
            </td>
            <td class="py-2 px-4 border-b flex items-center justify-center">
              <button onclick="openViewAccount('<%= account.id %>')"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded mr-2">View</button>
              <button onclick="toggleBanAccount('<%= account.id %>')" id="banButton<%= account.id %>"
                class="<%= account.is_lock ? 'bg-blue-500 hover:bg-blue-700' : 'bg-red-500 hover:bg-yellow-700' %> text-white font-bold py-1 px-2 rounded">
                <%= account.is_lock ? 'Unban' : 'Ban' %>
              </button>
            </td>
          </tr>
          <% }) %>
            <% } else { %>
              <tr>
                <td colspan="5" class="py-4 text-center">No accounts found.</td>
              </tr>
              <% } %>
    </tbody>
  </table>
  <!-- Product paging (include at most 5 numbers at once) -->
  <div id="account-pagination" class="flex justify-center gap-2 mt-5 text-sm">
    <% if (accounts.currentPage> 1) { %>
      <button type="button" data-page="<%= accounts.currentPage - 1 %>"
        class="rounded border bg-blue-500 py-2 px-4 text-white hover:bg-blue-700 focus:outline-none"
        onclick="changeAccountPage('<%= Number(accounts.currentPage) - 1 %>')">
        Trang trước
      </button>
      <% } %>

        <% const startPage=Math.max(1, accounts.currentPage - 2); const endPage=Math.min(accounts.totalPages, startPage
          + 4); %>

          <!-- Render numbered page buttons -->
          <% for (let i=startPage; i <=endPage; i++) { %>
            <button type="button" data-page="<%= i %>"
              class="page-btn rounded border py-2 px-4 hover:bg-blue-700 focus:outline-none <%= i === accounts.currentPage ? 'bg-blue-500 text-white' : 'border-blue-500 text-blue-500 hover:text-white' %>"
              onclick="changeAccountPage('<%= i %>')" <%=accounts.currentPage===i ? 'disabled' : '' %>
              >
              <%= i %>
            </button>
            <% } %>

              <!-- Render the Next button only if the currentPage is less than totalPage -->
              <% if (accounts.currentPage < accounts.totalPages) { %>
                <button type="button" data-page="<%= accounts.currentPage + 1 %>"
                  class="rounded border bg-blue-500 py-2 px-4 text-white hover:bg-blue-700 focus:outline-none"
                  onclick="changeAccountPage('<%= Number(accounts.currentPage) + 1 %>')">
                  Trang sau
                </button>
                <% } %>
  </div>
</section>

<!-- View Account Modal -->
<div id="ViewAccountModal" class="fixed inset-0 hidden h-full w-full overflow-y-auto bg-gray-600 bg-opacity-50">
  <div class="relative top-20 mx-auto w-96 rounded-md border bg-white p-5 shadow-lg">
    <h3 class="mb-4 text-lg font-bold">Add New Account</h3>
    <form id="addAccountForm">
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountUsername">
          Ảnh Đại Diện
        </label>
        <img id='account-detail-avatar' alt="user-avatar" src="" />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountUsername">
          Username
        </label>
        <input readonly
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none readonly"
          id="account-detail-name" type="text" placeholder="Username" required />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountEmail">
          Email
        </label>
        <input readonly
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none readonly"
          id="account-detail-email" type="email" placeholder="Email" required />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountRole">
          Số Điện Thoại
        </label>
        <input readonly
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none readonly"
          id="account-detail-phone" required>
        </input>
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountRole">
          Địa Chỉ
        </label>
        <input readonly
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none readonly"
          id="account-detail-address" required>
        </input>
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountRole">
          Ngày Sinh
        </label>
        <input readonly
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none readonly"
          id="account-detail-birthdate" required>
        </input>
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountRole">
          Giới Tính
        </label>
        <input readonly
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none readonly"
          id="account-detail-sex" required>
        </input>
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountRole">
          Thời Gian Tạo
        </label>
        <input readonly
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none readonly"
          id="account-detail-create-time" required>
        </input>
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="accountRole">
          Role
        </label>
        <input readonly
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none readonly"
          id="account-detail-role" required>
        </input>
      </div>
      <div class="flex items-center justify-end">
        <button
          class="focus:shadow-outline rounded bg-gray-500 py-2 px-4 font-bold text-white hover:bg-gray-700 focus:outline-none"
          type="button" onclick="hideModal('ViewAccountModal')">
          Thoát
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  // // Account management
  // let accounts = [
  //   {
  //     id: 1,
  //     username: 'john_doe',
  //     email: 'john@example.com',
  //     role: 'admin',
  //   },
  //   {
  //     id: 2,
  //     username: 'jane_smith',
  //     email: 'jane@example.com',
  //     role: 'user',
  //   },
  // ];
  
  // Event listener for sorting
  document.getElementById('account-sort').addEventListener('change', () => {
    changeAccountPage('<%= accounts.currentPage %>'); // Start at page 1 when applying a new filter
  });
  document.getElementById('account-filter-button').addEventListener('click', () => {
    changeAccountPage('<%= accounts.currentPage %>'); // Start at page 1 when applying a new filter
  });

  async function changeAccountPage(page = 1) {
    const pageDetail = await fetchFilterAccounts(page);
    // console.log(pageDetail);

    // Adjust pagination
    const pagination = document.getElementById('account-pagination');
    pagination.innerHTML = '';

    // Previous button
    if (pageDetail.currentPage > 1) {
      const prev = document.createElement('button');
      prev.innerText = 'Trang trước';
      prev.classList.add('rounded', 'border', 'bg-blue-500', 'py-2', 'px-4', 'text-white', 'hover:bg-blue-700', 'focus:outline-none');
      prev.onclick = () => changeAccountPage(Number(pageDetail.currentPage) - 1);
      pagination.appendChild(prev);
    }

    const startPage = Math.max(1, pageDetail.currentPage - 2);
    const endPage = Math.min(pageDetail.totalPage, startPage + 4);

    // Render numbered page buttons
    for (let i = startPage; i <= endPage; i++) {
      const button = document.createElement('button');
      button.innerText = i;
      button.onclick = () => changeAccountPage(i);
      if (Number(i) === Number(pageDetail.currentPage)) {
        button.disabled = true;
        button.classList.add('rounded', 'border', 'bg-blue-500', 'py-2', 'px-4', 'text-white', 'hover:bg-blue-700', 'focus:outline-none');
      } else {
        button.classList.add('rounded', 'border', 'border-blue-500', 'py-2', 'px-4', 'text-blue-500', 'focus:outline-none', 'hover:bg-blue-500', 'hover:text-white');
      }
      pagination.appendChild(button);
    }

    // Render the Next button only if the currentPage is less than totalPages
    if (pageDetail.currentPage < pageDetail.totalPage) {
      const next = document.createElement('button');
      next.innerText = 'Trang sau';
      next.classList.add('rounded', 'border', 'bg-blue-500', 'py-2', 'px-4', 'text-white', 'hover:bg-blue-700', 'focus:outline-none');
      next.onclick = () => changeAccountPage(Number(pageDetail.currentPage) + 1);
      pagination.appendChild(next);
    }
  }

  function renderAccounts(accounts) {
    const tableBody = document.getElementById('accountTableBody');
    tableBody.innerHTML = '';
    accounts.forEach((account) => {
      const createTimeFormatted = new Date(account.create_time).toLocaleDateString('en-GB', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
      }); // Format the date

      const createTimeFormattedTime = new Date(account.create_time).toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      }); // Format the time
      const fullCreateTime = `${createTimeFormatted} ${createTimeFormattedTime}`;
      const row = `
                    <tr>
                        <td class="py-2 px-4 border-b text-center">${account.id}</td>
                        <td class="py-2 px-4 border-b text-center">${account.name}</td>
                        <td class="py-2 px-4 border-b text-center">${account.email}</td>
                        <td class="py-2 px-4 border-b text-center">${account.is_admin ? 'Admin' : 'User'}</td>
                        <td class="py-2 px-4 border-b text-center">${fullCreateTime}</td>
                        <td class="py-2 px-4 border-b flex items-center justify-center">
                            <button onclick="openViewAccount(${account.id})" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded mr-2">View</button> 
                            <button
                              onclick="toggleBanAccount(${account.id})"
                              class="${account.is_lock === true  // Ensure strict comparison for true
          ? 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded'
          : 'bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded'
        }">
                              ${account.is_lock === true ? 'Unban' : 'Ban'}  <!-- Ensure strict comparison for true -->
                            </button>
                        </td>
                    </tr>
                `;
      tableBody.innerHTML += row;
    });
  }

  async function fetchFilterAccounts(page) {
    // console.log(page);
    const sort = document.getElementById('account-sort').value;
    const name = document.getElementById('account-search-name').value;
    const email = document.getElementById('account-search-email').value;
    // console.log(sort);
    // console.log(name);
    // Build query string
    let queryString = new URLSearchParams();
    if (sort && sort !== 'default') {
      const [field, order] = sort.split('-');
      queryString.append('sortBy', field);
      queryString.append('sortOrder', order);
    }
    if (name) queryString.append('name', name);
    if (email) queryString.append('email', email);
    // Add the page parameter
    if (page) queryString.append('page', page);
    console.log(queryString.toString());
    const res = await fetch(`/api/account?${queryString.toString()}`)
    const data = await res.json();
    renderAccounts(data.accounts);
    console.log(data.accounts);

    return { currentPage: data.currentPage, totalPage: data.totalPages };
  }

  async function toggleBanAccount(accountId) {
    try {
      const response = await fetch('/api/account/ban', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ account_id: accountId }),
      });

      const result = await response.json();

      // Check if the request was successful
      if (result.success) {
        // Toggle the button's class and text based on the new status
        const button = document.getElementById(`banButton${accountId}`);
        if (result.message === 'Account successfully banned') {
          button.classList.remove('bg-red-500', 'hover:bg-yellow-700');
          button.classList.add('bg-blue-500', 'hover:bg-blue-700');
          button.innerText = 'Unban';
          await Swal.fire({
            icon: 'success',
            title: 'Người dùng đã bị khóa',
            timer: 2000,
            timerProgressBar: true,
            showConfirmButton: false,
          });
        } else if (result.message === 'Account successfully unbanned') {
          button.classList.remove('bg-blue-500', 'hover:bg-blue-700');
          button.classList.add('bg-red-500', 'hover:bg-yellow-700');
          button.innerText = 'Ban';
          await Swal.fire({
            icon: 'success',
            title: 'Người dùng đã được mở khỏa',
            timer: 2000,
            timerProgressBar: true,
            showConfirmButton: false,
          });
        }

      } else {
        await Swal.fire({
          icon: 'error',
          title: 'Thất bại',
          text: result.message,
          timer: 2000,
          timerProgressBar: true,
          showConfirmButton: false,
        });
      }
    } catch (error) {
      console.error('Error toggling account ban status:', error);
      await Swal.fire({
        icon: 'error',
        title: 'Đã có lỗi xảy ra',
        timer: 2000,
        timerProgressBar: true,
        showConfirmButton: false,
      });
    }
  }

  async function openViewAccount(accountId) {
    try {
      // Fetch account details using the accountId
      const response = await fetch(`/api/account/${accountId}`);
      const account = await response.json();

      if (response.ok) {
        // Fill in the modal with the account details
        document.getElementById('account-detail-name').value = account.name;
        document.getElementById('account-detail-email').value = account.email;
        document.getElementById('account-detail-role').value = account.is_admin ? 'Admin' : 'User';
        document.getElementById('account-detail-phone').value = account.phone;
        document.getElementById('account-detail-address').value = account.address;
        document.getElementById('account-detail-sex').value = account.sex;
        document.getElementById('account-detail-avatar').src = account.avatar_url;
        document.getElementById('account-detail-birthdate').value = new Date(account.birthdate).toLocaleDateString('en-GB', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });

        const createTimeFormatted = new Date(account.create_time).toLocaleDateString('en-GB', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
        }); // Format the date

        const createTimeFormattedTime = new Date(account.create_time).toLocaleTimeString('en-US', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        }); // Format the time
        const fullCreateTime = `${createTimeFormatted} ${createTimeFormattedTime}`;

        document.getElementById('account-detail-create-time').value = `${fullCreateTime}`;

        // Show the modal by removing the 'hidden' class
        document.getElementById('ViewAccountModal').classList.remove('hidden');
      } else {
        // Handle error (e.g., account not found)
        // alert('Account not found');
      }
    } catch (error) {
      console.error('Error fetching account details:', error);
      // alert('Failed to fetch account details');
    }
  }

  function hideModal(modalId) {
    document.getElementById(modalId).classList.add('hidden');
  }
  // function addAccount(event) {
  //   event.preventDefault();
  //   const username = document.getElementById('accountUsername').value;
  //   const email = document.getElementById('accountEmail').value;
  //   const role = document.getElementById('accountRole').value;
  //   const newAccount = {
  //     id: accounts.length + 1,
  //     username: username,
  //     email: email,
  //     role: role,
  //   };
  //   accounts.push(newAccount);
  //   renderAccounts();
  //   hideModal('addAccountModal');
  //   event.target.reset();
  // }

  // function editAccount(id) {
  //   // Implement edit functionality
  //   console.log('Edit account', id);
  // }

  // function deleteAccount(id) {
  //   accounts = accounts.filter((account) => account.id !== id);
  //   renderAccounts();
  // }

  // // ban/unban account
  // function toggleBanAccount(id) {
  //   accounts = accounts.filter((account) => account.id !== id);
  //   renderAccounts();
  // }

  // // Add event listener for the account form
  // document
  //   .getElementById('addAccountForm')
  //   .addEventListener('submit', addAccount);
</script>