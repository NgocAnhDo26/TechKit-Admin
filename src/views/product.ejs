<!-- Products Management Section -->
<section id="products">
  <h2 class="mb-4 text-2xl font-bold">Quản lý sản phẩm</h2>
  <button
    onclick="openAddProductModal()"
    class="mb-4 rounded bg-green-500 py-2 px-4 font-bold text-white hover:bg-green-700"
  >
    Thêm sản phẩm mới
  </button>

  <!-- Filter Form, including search by name, filter by category, brand and sort by -->
  <form class="mb-4 text-sm">
    <div class="flex gap-4 items-center">
      <input
        id="search"
        class="focus:shadow-outline appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
        type="text"
        placeholder="Tìm kiếm theo tên"
      />
      <select
        id="category-filter"
        class="focus:shadow-outline appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
      >
        <option value="default">Loại</option>
        <% categories.forEach((category) => { %>
          <option value="<%= category.name %>"><%= category.name %></option>
        <% }); %>
      </select>
      <select
        id="brand-filter"
        class="focus:shadow-outline appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
      >
        <option value="default">Thương hiệu</option>
        <% brands.forEach((brand) => { %>
          <option value="<%= brand.name %>"><%= brand.name %></option>
        <% }); %>
      </select>

      <button type="button" id="filter-button" class="rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700 focus:outline-none">
        Lọc
      </button>

      <p class="flex-1 text-end">Sắp xếp: </p>
      <select
        id="sort"
        class="focus:shadow-outline appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
      >
        <option value="default">Mặc định</option>
        <option value="create_time-desc">Ngày tạo: Mới nhất</option>
        <option value="create_time-asc">Ngày tạo: Cũ nhất</option>
        <option value="price_sale-asc">Giá: tăng dần</option>
        <option value="price_sale-desc">Giá: giảm dần</option>
        <option value="sales-asc">Doanh số: tăng dần</option>
        <option value="sales-desc">Doanh số: giảm dần</option>
      </select>
    </div>
  </form>

  <!-- Product Table -->
  <table class="min-w-full bg-white">
    <thead>
      <tr class="text-sm">
        <th class="border-b p-2 px-4">ID</th>
        <th class="border-b p-2">Sản phẩm</th>
        <th class="border-b p-2">Giá</th>
        <th class="border-b p-2">Loại</th>
        <th class="border-b p-2">Thương hiệu</th>
        <th class="border-b p-2">Ngày tạo</th>
        <th class="border-b p-2">Tồn kho</th>
        <th class="border-b p-2">Tình trạng</th>
        <th class="border-b p-2">Doanh số</th>
        <th class="border-b p-2"></th>
      </tr>
    </thead>
    <tbody id="productTableBody">
      <!-- Product rows will be dynamically added here -->
      <% data.products.forEach((product) => { %>
      <tr class="text-sm" data-product-id="<%= product.id %>">
        <td class="p-2 px-4 border-b text-center"><%= product.id %></td>
        <td class="flex p-2 border-b items-center">
          <img class="h-16 w-16 object-cover mr-2" src="<%= product.profile_img.url %>" alt="<%= product.name %>">
          <p><%= product.name %></p>
        </td>
        <td class="p-2 border-b text-center">
          <% if (product.price_sale === product.price) { %>
            <%= new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.price) %>
          <% } else { %>
            <span class="line-through text-gray-500"><%= new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.price) %></span>
            <span class="text-red-500"><%= new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.price_sale) %></span>
          <% } %>
        </td>
        <td class="p-2 border-b text-center"><%= product.category %></td>
        <td class="p-2 border-b text-center"><%= product.brand %></td>
        <td class="border-b text-center"><%= product.create_time.toLocaleString() %></td>
        <td class="p-2 border-b text-center"><%= product.in_stock %></td>
        <td class="p-2 border-b text-center">
          <% if (product.status === 'on stock') { %>
            <span class="text-green-500">Còn hàng</span>
          <% } else if (product.status === 'out of stock') { %>
            <span class="text-red-500">Hết hàng</span>
          <% } else { %>
            <span class="text-yellow-500">Ngừng kinh doanh</span>
          <% } %>
        </td>
        <td class="p-2 border-b text-center"><%= product.sales %></td>
        <td class="p-2 border-b">
          <button class="m-1" title="Chỉnh sửa sản phẩm" onclick="openEditProduct('<%= product.id %>')">
            <i class="fa-solid fa-edit fa-lg text-blue-500 hover:text-blue-700 hover:scale-110"></i>
          </button>
          <button class="m-1" title="Chỉnh sửa ảnh sản phẩm" onclick="editImages('<%= product.id %>')">
            <i class="fa-solid fa-image fa-lg text-blue-500 hover:text-blue-700 hover:scale-110"></i>
          </button>
        </td>
      </tr>
      <% }); %>
    </tbody>
  </table>

  <!-- Product paging (include at most 5 numbers at once) -->
  <div id="pagination" class="flex justify-center gap-2 mt-5 text-sm">
    <% if (data.currentPage > 1) { %>
      <button
        type="button"
        data-page="<%= data.currentPage - 1 %>"
        class="rounded border bg-blue-500 py-2 px-4 text-white hover:bg-blue-700 focus:outline-none"
        onclick="changePage('<%= data.currentPage - 1 %>')"
      >
        Trang trước
      </button>
    <% } %>
    
    <% 
      const startPage = Math.max(1, data.currentPage - 2);
      const endPage = Math.min(data.totalPage, startPage + 4);
    %>

    <!-- Render numbered page buttons -->
    <% for (let i = startPage; i <= endPage; i++) { %>
        <button
          type="button"
          data-page="<%= i %>"
          class="page-btn rounded border py-2 px-4 hover:bg-blue-700 focus:outline-none <%= i === data.currentPage ? 'bg-blue-500 text-white' : 'border-blue-500 text-blue-500 hover:text-white' %>"
          onclick="changePage('<%= i %>')"
          <%= data.currentPage === i ? 'disabled' : '' %>
        >
          <%= i %>
        </button>
    <% } %>

    <!-- Render the Next button only if the currentPage is less than totalPage -->
    <% if (data.currentPage < data.totalPage) { %>
      <button
        type="button"
        data-page="<%= data.currentPage + 1 %>"
        class="rounded border bg-blue-500 py-2 px-4 text-white hover:bg-blue-700 focus:outline-none"
        onclick="changePage('<%= data.currentPage + 1 %>')"
        >
          Trang sau
        </button>
    <% } %>
  </div>
</section>


<!-- Add Product Modal -->
<div id="addProductModal" class="fixed inset-0 hidden h-full w-full overflow-y-auto bg-gray-600 bg-opacity-50">
  <div class="relative top-20 mx-auto w-96 rounded-md border bg-white p-5 shadow-lg">
    <h3 class="mb-4 text-lg font-bold">Thêm sản phẩm mới</h3>
    <form id="addProductForm">
      <!-- Basic Info -->
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="name">Tên sản phẩm</label>
        <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="name" type="text" placeholder="Tên sản phẩm" required />
      </div>

      <!-- Brand & Category -->
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="brand">Thương hiệu</label>
        <select class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="brand"></select>
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="category">Loại sản phẩm</label>
        <select class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="category"></select>
      </div>

      <!-- Price Info -->
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="price">Giá gốc</label>
        <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="price" type="number" min="0" placeholder="Giá gốc" required />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="priceSale">Giá khuyến mãi</label>
        <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="priceSale" type="number" min="0" placeholder="Giá khuyến mãi" />
      </div>

      <!-- Product Specs -->
      <p class="font-bold mb-2">Thông số sản phẩm</p>
      <div class="grid grid-cols-2 gap-2">
        <div class="mb-4">
          <label class="mb-2 block text-sm font-bold text-gray-700" for="storage">Bộ nhớ trong</label>
          <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="storage" type="text" placeholder="512GB SSD" />
        </div>
        <div class="mb-4">
          <label class="mb-2 block text-sm font-bold text-gray-700" for="cpu">CPU</label>
          <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="cpu" type="text" placeholder="Intel Core i5" />
        </div>
        <div class="mb-4">
          <label class="mb-2 block text-sm font-bold text-gray-700" for="screenSize">Kích thước màn hình</label>
          <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="screenSize" type="text" placeholder="15.6 inch" />
        </div>
        <div class="mb-4">
          <label class="mb-2 block text-sm font-bold text-gray-700" for="resolution">Độ phân giải</label>
          <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="resolution" type="text" placeholder="1920x1080" />
        </div>
        <div class="mb-4">
          <label class="mb-2 block text-sm font-bold text-gray-700" for="ram">RAM</label>
          <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="ram" type="text" placeholder="8GB DDR4" />
        </div>
        <div class="mb-4">
          <label class="mb-2 block text-sm font-bold text-gray-700" for="graphicCard">Card đồ họa</label>
          <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="graphicCard" type="text" placeholder="NVIDIA MX550" />
        </div>
      </div>

      <!-- Description -->
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="description">Mô tả sản phẩm</label>
        <textarea class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="description" placeholder="Mô tả chi tiết sản phẩm"></textarea>
      </div>

      <!-- Images -->
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="profileImageAdd">Ảnh đại diện</label>
        <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="profileImageAdd" type="file" accept="image/*" required />
        <div id="profileImagePreview" class="flex flex-wrap mt-2"></div>
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="otherImages">Ảnh khác</label>
        <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="otherImages" type="file" multiple accept="image/*" />
        <div id="otherImagesPreview" class="flex flex-wrap mt-2"></div>
      </div>

      <!-- Stock & Status -->
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="inStock">Số lượng trong kho</label>
        <input class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="inStock" type="number" min="0" placeholder="Số lượng" />
      </div>
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="status">Trạng thái</label>
        <select class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="status">
          <option value="on stock">Còn hàng</option>
          <option value="out of stock">Hết hàng</option>
          <option value="suspend">Ngừng kinh doanh</option>
        </select>
      </div>

      <!-- Buttons -->
      <div class="flex items-center justify-between">
        <button id="addProductButton" class="focus:shadow-outline rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700 focus:outline-none"
          type="submit">Thêm sản phẩm</button>
        <button class="focus:shadow-outline rounded bg-gray-500 py-2 px-4 font-bold text-white hover:bg-gray-700 focus:outline-none"
          type="button" onclick="closeAddProduct()">Hủy</button>
      </div>
    </form>
  </div>
</div>


<!-- Edit Product Modal -->
<div
  id="editProductModal"
  class="fixed inset-0 hidden h-full w-full overflow-y-auto bg-gray-600 bg-opacity-50"
>
  <div
    class="relative top-20 mx-auto w-96 rounded-md border bg-white p-5 shadow-lg"
  >
    <h3 class="mb-4 text-lg font-bold">Chỉnh sửa sản phẩm</h3>
    <form id="editProductForm">
      <div class="mb-4">
        <label class="mb-2 block
        text-sm font-bold text-gray-700" for="name">
          Tên sản phẩm
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="name-change"
          type="text"
          placeholder="Name"
          required
        />
      </div>
      <div class="mb-4" id="brand-change-dropdown">
        <label class="mb-2 block
        text-sm font-bold text-gray-700" for="brand">
          Thương hiệu (Hãng)
        </label>
        <select
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="brand-change"
        >
        <!-- Brands will be dynamically added here -->   
        </select> 
      </div>
      <div class="mb-4" id="category-change-dropdown">
        <label class="mb-2 block
        text-sm font-bold text-gray-700" for="category">
          Loại sản phẩm
        </label>
        <select
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="category-change"
        >
        <!-- Categories will be dynamically added here -->
        </select>
      </div>
      <div class="mb-4">
        <label class="mb-2 block
        text-sm font-bold text-gray-700" for="price">
          Giá sản phẩm
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="price-change"
          type="number"
          min="0"
          placeholder="Price"
          required
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block
        text-sm font-bold text-gray-700" for="priceSale">
          Giá khuyến mãi
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="priceSale-change"
          type="number"
          min="0"
          placeholder="Price Sale"
          required
        />
      </div>
      <p class="font-bold mb-2">Thông số sản phẩm</p>
      <div class="grid grid-cols-2 gap-2">
        <div class="mb-4">
          <label class="mb-2 block
          text-sm font-bold text-gray-700" for="storage-change">
            Bộ nhớ trong
          </label>
          <input
            class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="storage-change"
            type="text"
            placeholder="512GB SSD"
          />
        </div>
        <div class="mb-4">
          <label class="mb-2 block
          text-sm font-bold text-gray-700" for="cpu">
            CPU
          </label>
          <input
            class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="cpu-change"
            type="text"
            placeholder="CPU"
          />
        </div>
        <div class="mb-4">
          <label class="mb-2 block
          text-sm font-bold text-gray-700" for="screenSize">
            Kích thước màn hình
          </label>
          <input
            class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="screenSize-change"
            type="text"
            placeholder="15.6 inch"
          />
        </div>
        <div class="mb-4">
          <label class="mb-2 block
          text-sm font-bold text-gray-700" for="resolution">
            Độ phân giải
          </label>
          <input
            class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="resolution-change"
            type="text"
            placeholder="FHD"
          />
        </div>
        <div class="mb-4">
          <label class="mb-2 block
          text-sm font-bold text-gray-700" for="ram">
            Ram
          </label>
          <input
            class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="ram-change"
            type="text"
            placeholder="Ram"
          />
        </div>
        <div class="mb-4">
          <label class="mb-2 block
          text-sm font-bold text-gray-700" for="graphicCard-change">
            Card đồ họa
          </label>
          <input
            class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
            id="graphicCard-change"
            type="text"
            placeholder="Graphic Card"
          />
        </div>
      </div>
      <div class="mb-4">
        <label class="mb-2 block
        text-sm font-bold text-gray-700" for="description">
          Mô tả sản phẩm
        </label>
        <textarea
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="description-change"
          placeholder="Description"
        ></textarea>
      </div>
      <div class="mb-4">
        <label class="mb-2 block
        text-sm font-bold text-gray-700" for="inStock">
          Số hàng trong kho
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="inStock-change"
          type="number"
          min="0"
          placeholder="Số lượng"
        />
      </div>
      <div class="mb-4">
        <label class="mb-2 block
        text-sm font-bold text-gray-700" for="status">
          Trạng thái
        </label>
        <select
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="status-change"
        >
          <option value="on stock">Còn hàng</option>
          <option value="out of stock">Hết hàng</option>
          <option value="suspend">Ngừng kinh doanh</option>
        </select>
      </div>
      <div class="flex items-center justify-between">
        <button
          id="editProductButton"
          class="focus:shadow-outline rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700 focus:outline-none"
          type="submit"
        >
          Lưu
        </button>
        <button
          id="cancelEditProductButton"
          class="focus:shadow-outline rounded bg-gray-500 py-2 px-4 font-bold text-white hover:bg-gray-700 focus:outline-none"
          type="button"
          onclick="hideModal('editProductModal')"
        >
          Hủy
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Edit Images Modal -->
<div
  id="editImagesModal"
  class="fixed inset-0 hidden h-full w-full overflow-y-auto bg-gray-600 bg-opacity-50"
>
  <div
    class="relative top-20 mx-auto w-96 rounded-md border bg-white p-5 shadow-lg"
  >
    <h3 class="mb-4 text-lg font-bold">Chỉnh sửa ảnh sản phẩm</h3>
    <form id="editImagesForm">
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="profileImage">
          Ảnh đại diện
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="profile-image"
          type="file"
          accept="image/*"
        />
        <div id="profile-image-preview" class="flex flex-wrap mt-2">
          <!-- Preview profile image will be appended here -->
        </div>
      </div>

      
      <div class="mb-4">
        <label class="mb-2 block text-sm font-bold text-gray-700" for="images">
          Các hình ảnh khác
        </label>
        <input
          class="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
          id="other-images"
          type="file"
          multiple
          accept="image/*"
        />
        <div id="other-images-preview" class="flex flex-wrap mt-2">
          <!-- Preview images will be appended here -->
        </div>
      </div>
      <div class="flex items-center justify-between">
        <button
          id="editImagesButton"
          class="focus:shadow-outline rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700 focus:outline-none"
          type="submit"
        >
          OK
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  // Use this for AJAX rendering
  function renderProducts(products) {
    const tableBody = document.getElementById('productTableBody');
    tableBody.innerHTML = '';
    products.forEach((product) => {
      const row = `
                    <tr class="text-sm" data-product-id="${product.id}">
                      <td class="p-2 px-4 border-b text-center">${product.id}</td>
                      <td class="flex p-2 border-b items-center">
                        <img class="h-16 w-16 object-cover mr-2" src="${product.profile_img.url}" alt="${product.name}">
                        <p>${product.name}</p>
                      </td>
                      <td class="p-2 border-b text-center">
                        ${(product.price_sale === product.price) ?
                            new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.price)
                            : `<span class="line-through text-gray-500">${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.price)}</span>
                               <span class="text-red-500">${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.price_sale)}</span>`}
                      </td>
                      <td class="p-2 border-b text-center">${product.category}</td>
                      <td class="p-2 border-b text-center">${product.brand}</td>
                      <td class="border-b text-center">${product.create_time.toLocaleString()}</td>
                      <td class="p-2 border-b text-center">${product.in_stock}</td>
                      <td class="p-2 border-b text-center">
                        ${ product.status === 'on stock' ? `<span class="text-green-500">Còn hàng</span>`
                          : product.status === 'out of stock' ? `<span class="text-red-500">Hết hàng</span>`
                          : `<span class="text-yellow-500">Ngừng kinh doanh</span>` }
                      </td>
                      <td class="p-2 border-b text-center">${product.sales}</td>
                      <td class="p-2 border-b">
                        <button class="m-1" title="Chỉnh sửa sản phẩm" onclick="openEditProduct(${product.id})">
                          <i class="fa-solid fa-edit fa-lg text-blue-500 hover:text-blue-700 hover:scale-110"></i>
                        </button>
                        <button class="m-1" title="Chỉnh sửa ảnh sản phẩm" onclick="editImages(${product.id})">
                          <i class="fa-solid fa-image fa-lg text-blue-500 hover:text-blue-700 hover:scale-110"></i>
                        </button>
                      </td>
                    </tr>
                `;
      tableBody.innerHTML += row;
    });
  }

  let profileImage = null;
  let otherImages = [];

  // Handle profile image selection
  document.getElementById('profileImageAdd').addEventListener('change', function(event) {
    profileImage = event.target.files[0];
    renderPreview('profileImagePreview', [profileImage], () => {
      profileImage = null;
      renderPreview('profileImagePreview', [], () => {});
    });
  });

  // Handle other images selection 
  document.getElementById('otherImages').addEventListener('change', function(event) {
    otherImages.push(...event.target.files);
    renderPreview('otherImagesPreview', otherImages, removeOtherImage);
  });

  function removeOtherImage(index) {
    otherImages.splice(index, 1);
    renderPreview('otherImagesPreview', otherImages, removeOtherImage);
  }

  function createImagePreviewElement(fileData, removeCallback, isProfile = false) {
    // Creates the wrapper and image
    const wrapper = document.createElement('div');
    wrapper.classList.add('relative', 'inline-block', 'm-1');
    const img = document.createElement('img');
    img.src = fileData;
    img.classList.add('h-20', 'w-20', 'object-cover', 'm-1', 'border', 'border-gray-200');
    wrapper.appendChild(img);

    // Only add remove button if it's not a profile image
    if (!isProfile) {
      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.innerText = 'x';
      removeBtn.classList.add(
        'absolute', '-top-2', '-right-2', 'bg-red-600', 'text-white',
        'rounded-full', 'w-4', 'h-4', 'flex', 'items-center', 'justify-center',
        'text-sm', 'font-bold', 'hover:bg-red-700', 'focus:outline-none'
      );
      removeBtn.onclick = removeCallback;
      wrapper.appendChild(removeBtn);
    }
    
    return wrapper;
  }

  function renderPreview(containerId, filesArray, removeHandler, areUrls = false) {
    const previewContainer = document.getElementById(containerId);
    previewContainer.innerHTML = '';
  
    filesArray.forEach((file, index) => {
        if (!file) return;
        
        // Check if this is a profile image preview
        const isProfile = containerId === 'profile-image-preview';
        
        if (areUrls) {
            if (!file.url) return; // Skip if no URL is present
            const wrapper = createImagePreviewElement(file.url, () => removeHandler(index), isProfile);
            previewContainer.appendChild(wrapper);
        } else {
            const reader = new FileReader();
            reader.onload = (e) => {
                const wrapper = createImagePreviewElement(e.target.result, () => removeHandler(index), isProfile);
                previewContainer.appendChild(wrapper);
            };
            reader.readAsDataURL(file);
        }
    });
  }

  async function addProduct(event) {
    event.preventDefault();
    showLoading('Đang thêm sản phẩm...');
    const formData = new FormData();
    // Add profile image first
    formData.append('images', profileImage);
    
    // Then add other images
    otherImages.forEach((file) => formData.append('images', file));

    // Add other form fields
    formData.append('name', document.getElementById('name').value);
    formData.append('brand', document.getElementById('brand').value);
    formData.append('category', document.getElementById('category').value);
    formData.append('storage', document.getElementById('storage').value);
    formData.append('cpu', document.getElementById('cpu').value);
    formData.append('screenSize', document.getElementById('screenSize').value);
    formData.append('resolution', document.getElementById('resolution').value);
    formData.append('ram', document.getElementById('ram').value);
    formData.append('graphicCard', document.getElementById('graphicCard').value);
    formData.append('description', document.getElementById('description').value);
    formData.append('price', document.getElementById('price').value);
    formData.append('priceSale', document.getElementById('priceSale').value);
    formData.append('inStock', document.getElementById('inStock').value);
    formData.append('status', document.getElementById('status').value);

    await fetch('/api/product', {
      method: 'POST',
      body: formData,
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          hideLoading();
          showSuccessNotification('Thêm sản phẩm thành công');
          closeAddProduct(); // Remove event parameter
        } else {
          showErrorNotification('Thêm sản phẩm thất bại', data.message);
        }
      });
  }

  // Event listeners
  const addProductButton = document.getElementById('addProductButton');
  addProductButton.addEventListener('click', addProduct);

  // Initialize dropdowns for brand and category
  async function initializeDropdowns() {
    try {
      const categoryResponse = await fetch('/api/category');
      const categoryData = await categoryResponse.json();
      const brandResponse = await fetch('/api/brand');
      const brandData = await brandResponse.json();

      const brandSelect = document.getElementById('brand');
      const categorySelect = document.getElementById('category');

      // Clear existing options
      brandSelect.innerHTML = '<option value="">Chọn Thương Hiệu</option>';
      categorySelect.innerHTML = '<option value="">Chọn Danh Mục</option>';

      // Add brand options
      brandData.result.forEach((brand) => {
        brandSelect.innerHTML += `<option value="${brand.name}">${brand.name}</option>`;
      });

      // Add category options
      categoryData.result.forEach((category) => {
        categorySelect.innerHTML += `<option value="${category.name}">${category.name}</option>`;
      });
    } catch (error) {
      console.error('Failed to load categories and brands:', error);
    }
  }

  function openAddProductModal() {
    showLoading();
    initializeDropdowns().then(() => {
      hideLoading();
      showModal('addProductModal');
    });
  }

  function closeAddProduct() {
    hideModal('addProductModal');
    // Get form by ID instead of using event.target
    addProductForm.reset();
    profileImage = null;
    otherImages = []; // Reset other images array
    renderPreview('profileImagePreview', [], () => {});
    renderPreview('otherImagesPreview', [], removeOtherImage);
  }

  async function fetchFilterProducts(page = 1) {
    const category = document.getElementById('category-filter').value;
    const brand = document.getElementById('brand-filter').value;
    const sort = document.getElementById('sort').value;
    const keyword = document.getElementById('search').value;

    // Build query string
    let queryString = new URLSearchParams();

    if (category && category !== 'default') queryString.append('category', category);
    if (brand && brand !== 'default') queryString.append('brand', brand);
    if (sort && sort !== 'default') {
      const [field, order] = sort.split('-');
      queryString.append('sortBy', field);
      queryString.append('order', order);
    }
    if (keyword) queryString.append('keyword', keyword);
    queryString.append('page', page);

    const res = await fetch(`/api/product?${queryString.toString()}`);
    const data = await res.json();
    renderProducts(data.products);

    return {currentPage: data.currentPage, totalPage: data.totalPage};
  }

  // Event listener for filter button
  document.getElementById('filter-button').addEventListener('click', changePage);

  // Event listener for sorting
  document.getElementById('sort').addEventListener('change', changePage);

  // Edit product
  async function openEditProduct(id) {
    showLoading();

    // Fetch product first to get its data
    const productRes = await fetch(`/api/product/${id}`);
    const product = await productRes.json();

    // Fetch categories and brands
    const [categoryRes, brandRes] = await Promise.all([
      fetch('/api/category'),
      fetch('/api/brand')
    ]);
    const [categoryData, brandData] = await Promise.all([
      categoryRes.json(),
      brandRes.json()
    ]);

    // Add categories to dropdown with product's category selected
    const categoryDropdown = document.getElementById('category-change');
    categoryDropdown.innerHTML = '';
    categoryData.result.forEach((category) => {
      const option = document.createElement('option');
      option.value = category.id;
      option.innerText = category.name;
      if (category.id === product.category_id) {
        option.selected = true;
      }
      categoryDropdown.appendChild(option);
    });

    // Add brands to dropdown with product's brand selected
    const brandDropdown = document.getElementById('brand-change');
    brandDropdown.innerHTML = '';
    brandData.result.forEach((brand) => {
      const option = document.createElement('option');
      option.value = brand.id;
      option.innerText = brand.name;
      if (brand.id === product.brand_id) {
        option.selected = true;
      }
      brandDropdown.appendChild(option);
    });

    // Fill in the rest of the form
    document.getElementById('name-change').value = product.name;
    document.getElementById('price-change').value = product.price;
    document.getElementById('priceSale-change').value = product.price_sale;
    document.getElementById('storage-change').value = product.storage;  
    document.getElementById('cpu-change').value = product.cpu;
    document.getElementById('screenSize-change').value = product.screen_size;
    document.getElementById('resolution-change').value = product.resolution;
    document.getElementById('ram-change').value = product.ram;
    document.getElementById('graphicCard-change').value = product.graphic_card;
    document.getElementById('description-change').value = product.description;
    document.getElementById('inStock-change').value = product.in_stock;
    document.getElementById('status-change').value = product.status;

    // Add event listener to save button
    document.getElementById('editProductButton').onclick = async (event) => {
      event.preventDefault();
      let formData = {};
      
      formData.name = document.getElementById('name-change').value;
      formData.brand_id = document.getElementById('brand-change').value;
      formData.category_id = document.getElementById('category-change').value;
      formData.storage = document.getElementById('storage-change').value;
      formData.cpu = document.getElementById('cpu-change').value;
      formData.screen_size = document.getElementById('screenSize-change').value;
      formData.resolution = document.getElementById('resolution-change').value;
      formData.ram = document.getElementById('ram-change').value;
      formData.graphic_card = document.getElementById('graphicCard-change').value;
      formData.description = document.getElementById('description-change').value;
      formData.price = document.getElementById('price-change').value;
      formData.price_sale = document.getElementById('priceSale-change').value;
      formData.in_stock = document.getElementById('inStock-change').value;
      formData.status = document.getElementById('status-change').value;

      const res = await fetch(`/api/product/${id}`, {
        method: 'PUT',
        body: JSON.stringify(formData),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await res.json();
      if (data.success) {
        showSuccessNotification('Cập nhật sản phẩm thành công');

        hideModal('editProductModal');
        location.reload();
      } else {
        showErrorNotification('Cập nhật sản phẩm thất bại', data.message);
      }
    };

    hideLoading();

    showModal('editProductModal');
  }

  let otherImagesPreviewEdit = []; // Store both url and public_id

  async function editImages(id) {
    showLoading();
    const res = await fetch(`/api/product/${id}`);
    const product = await res.json();

    // Store complete image objects instead of just URLs
    otherImagesPreviewEdit = product.images || [];

    // Only render profile image preview if it exists
    if (product.profile_img && product.profile_img.url) {
        renderPreview('profile-image-preview', [product.profile_img], () => removeImageDB(id, product.profile_img.public_id), true);
    } else {
        document.getElementById('profile-image-preview').innerHTML = '';
    }

    // Only render other images if they exist
    if (otherImagesPreviewEdit.length > 0) {
        renderPreview('other-images-preview', otherImagesPreviewEdit, (i) => removeImageDB(id, otherImagesPreviewEdit[i].public_id), true);
    } else {
        document.getElementById('other-images-preview').innerHTML = '';
    }

    document.getElementById('editImagesForm').setAttribute('data-id', id);
    hideLoading();
    showModal('editImagesModal');
  }

  async function removeImageDB(id, public_id) {
    showConfirmDialog(
      'Bạn có chắc chắn muốn xóa ảnh này? Hành động này không thể hoàn tác',
      async () => {
        showLoading('Đang xóa...');

        const res = await fetch(`/api/product/${id}/image?publicId=${public_id}`, {
          method: 'DELETE',
          headers: {'Content-Type': 'application/json'},
        });
        
        const data = await res.json();
        if (data.success) {
          showSuccessNotification('Xóa ảnh thành công');
          // Update otherImagesPreviewEdit array
          otherImagesPreviewEdit = otherImagesPreviewEdit.filter(img => img.public_id !== public_id);
          // Re-render the preview
          renderPreview('other-images-preview', otherImagesPreviewEdit, (i) => removeImageDB(id, otherImagesPreviewEdit[i].public_id), true);
        } else {
          showErrorNotification('Xóa ảnh thất bại', data.message);
        }
      }
    );
  }

  async function changePage(page = 1) {
    const pageDetail = await fetchFilterProducts(page);
    renderPagination('pagination', pageDetail.currentPage, pageDetail.totalPage, changePage);
  }

  function handleImageUpload(event, productId, isProfile = false) {
    showConfirmDialog(
      isProfile ? 'Cập nhật ảnh đại diện?' : 'Thêm ảnh mới?',
      async () => {
        showLoading('Đang tải...');
        const formData = new FormData();
        const files = Array.from(event.target.files);
        files.forEach((file) => formData.append(isProfile ? 'profile_image' : 'images', file));

        try {
          const response = await fetch(`/api/product/${productId}/${isProfile ? 'profile-image' : 'image'}`, {
            method: isProfile ? 'PUT' : 'POST',
            body: formData,
          });
          const data = await response.json();
          if (data.success) {
            showSuccessNotification(isProfile ? 'Cập nhật ảnh đại diện thành công' : 'Thêm ảnh mới thành công');
            
            if (isProfile) {
              // Update profile image preview in edit modal
              renderPreview('profile-image-preview', [{url: data.image.url}], null, true);
              
              // Update profile image in product table
              const productRow = document.querySelector(`tr[data-product-id="${productId}"]`);
              if (productRow) {
                const imgElement = productRow.querySelector('td:nth-child(2) img');
                if (imgElement) {
                  imgElement.src = data.image.url;
                }
              } else {
                // If row not found, refresh the whole table
                fetchFilterProducts(1);
              }
            } else {
              // Add new images to existing array
              otherImagesPreviewEdit = [...otherImagesPreviewEdit, ...data.images];
              renderPreview('other-images-preview', otherImagesPreviewEdit, 
                (i) => removeImageDB(productId, otherImagesPreviewEdit[i].public_id), true);
            }
          } else {
            showErrorNotification('Thất bại', data.message);
          }
        } catch (error) {
          showErrorNotification('Có lỗi xảy ra', error.message);
        }
      }
    );
  }

  // Update event listeners to use handleImageUpload
  document.getElementById('profile-image').addEventListener('change', (e) => {
    const productId = document.getElementById('editImagesForm').getAttribute('data-id');
    handleImageUpload(e, productId, true);
  });

  document.getElementById('other-images').addEventListener('change', (e) => {
    const productId = document.getElementById('editImagesForm').getAttribute('data-id');
    handleImageUpload(e, productId, false);
  });

  // Event listner for editImagesButton
  document
    .getElementById('editImagesButton')
    .addEventListener('click', (e) => {
      e.preventDefault();
      hideModal('editImagesModal');
    });

</script>
